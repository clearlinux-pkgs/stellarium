From 31fd7bebf33fa710ce53ac8375238a24758312bc Mon Sep 17 00:00:00 2001
From: Nicolas Benes <nbenes.gh@xandea.de>
Date: Sun, 16 Apr 2023 18:07:48 +0200
Subject: [PATCH 1/2] Port to INDI 2.0.0

---
 .../src/INDI/INDIConnection.cpp               | 216 ++++++++----------
 .../src/INDI/INDIConnection.hpp               |  18 +-
 2 files changed, 96 insertions(+), 138 deletions(-)

diff --git a/plugins/TelescopeControl/src/INDI/INDIConnection.cpp b/plugins/TelescopeControl/src/INDI/INDIConnection.cpp
index e88589e8a249..9d384313f64c 100644
--- a/plugins/TelescopeControl/src/INDI/INDIConnection.cpp
+++ b/plugins/TelescopeControl/src/INDI/INDIConnection.cpp
@@ -44,98 +44,96 @@ INDIConnection::Coordinates INDIConnection::position() const
 void INDIConnection::setPosition(INDIConnection::Coordinates coords)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope)
+	if (!mTelescope.isValid())
 		return;
 
-	if (!mTelescope->isConnected())
+	if (!mTelescope.isConnected())
 	{
 		qDebug() << "Error: Telescope not connected";
 		return;
 	}
 
 	// Make sure the TRACK member of switch ON_COORD_SET is set
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("ON_COORD_SET");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("ON_COORD_SET");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or ON_COORD_SET switch...";
 		return;
 	}
 	// Note that confusingly there is a SLEW switch member as well that will move but not track.
 	// TODO: Figure out if there is to be support for it
-	ISwitch *track = IUFindSwitch(switchVector, "TRACK");
+	auto track = switchVector.findWidgetByName("TRACK");
 	if (track->s == ISS_OFF)
 	{
-		track->s = ISS_ON;
+		track->setState(ISS_ON);
 		sendNewSwitch(switchVector);
 	}
 
-	INumberVectorProperty *property = nullptr;
-	property = mTelescope->getNumber("EQUATORIAL_EOD_COORD");
-	if (!property)
+	auto property = mTelescope.getNumber("EQUATORIAL_EOD_COORD");
+	if (!property.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or EQUATORIAL_EOD_COORD property...";
 		return;
 	}
 
-	property->np[0].value = coords.RA;
-	property->np[1].value = coords.DEC;
+	property[0].setValue(coords.RA);
+	property[1].setValue(coords.DEC);
 	sendNewNumber(property);
 }
 
 void INDIConnection::syncPosition(INDIConnection::Coordinates coords)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope)
+	if (!mTelescope.isValid())
 		return;
 
-	if (!mTelescope->isConnected())
+	if (!mTelescope.isConnected())
 	{
 		qDebug() << "Error: Telescope not connected";
 		return;
 	}
 
 	// Make sure the SYNC member of switch ON_COORD_SET is set
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("ON_COORD_SET");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("ON_COORD_SET");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or ON_COORD_SET switch...";
 		return;
 	}
 
-	ISwitch *track = IUFindSwitch(switchVector, "TRACK");
-	ISwitch *slew = IUFindSwitch(switchVector, "SLEW");
-	ISwitch *sync = IUFindSwitch(switchVector, "SYNC");
-	track->s = ISS_OFF;
-	slew->s = ISS_OFF;
-	sync->s = ISS_ON;
+	auto track = switchVector.findWidgetByName("TRACK");
+	auto slew = switchVector.findWidgetByName("SLEW");
+	auto sync = switchVector.findWidgetByName("SYNC");
+	track->setState(ISS_OFF);
+	slew->setState(ISS_OFF);
+	sync->setState(ISS_ON);
 	sendNewSwitch(switchVector);
 
-	INumberVectorProperty *property = nullptr;
-	property = mTelescope->getNumber("EQUATORIAL_EOD_COORD");
-	if (!property)
+	auto property = mTelescope.getNumber("EQUATORIAL_EOD_COORD");
+	if (!property.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or EQUATORIAL_EOD_COORD property...";
 		return;
 	}
 
-	property->np[0].value = coords.RA;
-	property->np[1].value = coords.DEC;
+	property[0].setValue(coords.RA);
+	property[1].setValue(coords.DEC);
 	sendNewNumber(property);
 
 	// And now unset SYNC switch member to revert to default state/behavior
-	track->s = ISS_ON;
-	slew->s = ISS_OFF;
-	sync->s = ISS_OFF;
+	track->setState(ISS_ON);
+	slew->setState(ISS_OFF);
+	sync->setState(ISS_OFF);
 	sendNewSwitch(switchVector);
 }
 
 bool INDIConnection::isDeviceConnected() const
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope)
+	if (!mTelescope.isValid())
 		return false;
 
-	return mTelescope->isConnected();
+	return mTelescope.isConnected();
 }
 
 const QStringList INDIConnection::devices() const
@@ -147,28 +145,28 @@ const QStringList INDIConnection::devices() const
 void INDIConnection::unParkTelescope()
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope || !mTelescope->isConnected())
+	if (!mTelescope.isValid() || !mTelescope.isConnected())
 		return;
 
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("TELESCOPE_PARK");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("TELESCOPE_PARK");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or TELESCOPE_PARK switch...";
 		return;
 	}
 
-	ISwitch *park = IUFindSwitch(switchVector, "PARK");
+	auto park = switchVector.findWidgetByName("PARK");
 	if (park->s == ISS_ON)
 	{
-		park->s = ISS_OFF;
+		park->setState(ISS_OFF);
 		sendNewSwitch(switchVector);
 	}
 
 	// The telescope will work without running command below, but I use it to avoid undefined state for parking property.
-	ISwitch *unpark = IUFindSwitch(switchVector, "UNPARK");
+	auto unpark = switchVector.findWidgetByName("UNPARK");
 	if (unpark->s == ISS_OFF)
 	{
-		unpark->s = ISS_ON;
+		unpark->setState(ISS_ON);
 		sendNewSwitch(switchVector);
 	}
 }
@@ -179,27 +177,27 @@ void INDIConnection::unParkTelescope()
 void INDIConnection::parkTelescope()
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope || !mTelescope->isConnected())
+	if (!mTelescope.isValid() || !mTelescope.isConnected())
 		return;
 
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("TELESCOPE_PARK");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("TELESCOPE_PARK");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or TELESCOPE_PARK switch...";
 		return;
 	}
 
-	ISwitch *park = IUFindSwitch(switchVector, "PARK");
+	auto park = switchVector.findWidgetByName("PARK");
 	if (park->s == ISS_OFF)
 	{
-		park->s = ISS_ON;
+		park->setState(ISS_ON);
 		sendNewSwitch(switchVector);
 	}
 
-	ISwitch *unpark = IUFindSwitch(switchVector, "UNPARK");
+	auto unpark = switchVector.findWidgetByName("UNPARK");
 	if (unpark->s == ISS_ON)
 	{
-		unpark->s = ISS_OFF;
+		unpark->setState(ISS_OFF);
 		sendNewSwitch(switchVector);
 	}
 }
@@ -208,24 +206,24 @@ void INDIConnection::parkTelescope()
 void INDIConnection::moveNorth(int speed)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope || !mTelescope->isConnected())
+	if (!mTelescope.isValid() || !mTelescope.isConnected())
 		return;
 
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("TELESCOPE_MOTION_NS");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("TELESCOPE_MOTION_NS");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or TELESCOPE_MOTION_NS switch...";
 		return;
 	}
 
-	ISwitch *motion = IUFindSwitch(switchVector, "MOTION_NORTH");
+	auto motion = switchVector.findWidgetByName("MOTION_NORTH");
 
 	if (speed == SLEW_STOP)
-		motion->s = ISS_OFF;
+		motion->setState(ISS_OFF);
 	else
 	{
 		setSpeed(speed);
-		motion->s = ISS_ON;
+		motion->setState(ISS_ON);
 	}
 
 	sendNewSwitch(switchVector);
@@ -234,24 +232,24 @@ void INDIConnection::moveNorth(int speed)
 void INDIConnection::moveEast(int speed)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope || !mTelescope->isConnected())
+	if (!mTelescope.isValid() || !mTelescope.isConnected())
 		return;
 
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("TELESCOPE_MOTION_WE");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("TELESCOPE_MOTION_WE");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or TELESCOPE_MOTION_WE switch...";
 		return;
 	}
 
-	ISwitch *motion = IUFindSwitch(switchVector, "MOTION_EAST");
+	auto motion = switchVector.findWidgetByName("MOTION_EAST");
 
 	if (speed == SLEW_STOP)
-		motion->s = ISS_OFF;
+		motion->setState(ISS_OFF);
 	else
 	{
 		setSpeed(speed);
-		motion->s = ISS_ON;
+		motion->setState(ISS_ON);
 	}
 
 	sendNewSwitch(switchVector);
@@ -260,24 +258,24 @@ void INDIConnection::moveEast(int speed)
 void INDIConnection::moveSouth(int speed)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope || !mTelescope->isConnected())
+	if (!mTelescope.isValid() || !mTelescope.isConnected())
 		return;
 
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("TELESCOPE_MOTION_NS");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("TELESCOPE_MOTION_NS");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or TELESCOPE_MOTION_NS switch...";
 		return;
 	}
 
-	ISwitch *motion = IUFindSwitch(switchVector, "MOTION_SOUTH");
+	auto motion = switchVector.findWidgetByName("MOTION_SOUTH");
 
 	if (speed == SLEW_STOP)
-		motion->s = ISS_OFF;
+		motion->setState(ISS_OFF);
 	else
 	{
 		setSpeed(speed);
-		motion->s = ISS_ON;
+		motion->setState(ISS_ON);
 	}
 
 	sendNewSwitch(switchVector);
@@ -286,24 +284,24 @@ void INDIConnection::moveSouth(int speed)
 void INDIConnection::moveWest(int speed)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (!mTelescope || !mTelescope->isConnected())
+	if (!mTelescope.isValid() || !mTelescope.isConnected())
 		return;
 
-	ISwitchVectorProperty *switchVector = mTelescope->getSwitch("TELESCOPE_MOTION_WE");
-	if (!switchVector)
+	auto switchVector = mTelescope.getSwitch("TELESCOPE_MOTION_WE");
+	if (!switchVector.isValid())
 	{
 		qDebug() << "Error: unable to find Telescope or TELESCOPE_MOTION_WE switch...";
 		return;
 	}
 
-	ISwitch *motion = IUFindSwitch(switchVector, "MOTION_WEST");
+	auto motion = switchVector.findWidgetByName("MOTION_WEST");
 
 	if (speed == SLEW_STOP)
-		motion->s = ISS_OFF;
+		motion->setState(ISS_OFF);
 	else
 	{
 		setSpeed(speed);
-		motion->s = ISS_ON;
+		motion->setState(ISS_ON);
 	}
 
 	sendNewSwitch(switchVector);
@@ -311,23 +309,24 @@ void INDIConnection::moveWest(int speed)
 
 void INDIConnection::setSpeed(int speed)
 {
-	ISwitchVectorProperty *slewRateSP = mTelescope->getSwitch("TELESCOPE_SLEW_RATE");
+	auto slewRateSP = mTelescope.getSwitch("TELESCOPE_SLEW_RATE");
 
-	if (!slewRateSP || speed < 0 || speed > slewRateSP->nsp)
+	if (!slewRateSP.isValid() || speed < 0 ||
+			static_cast<std::size_t>(speed) > slewRateSP.count())
 		return;
 
-	IUResetSwitch(slewRateSP);
-	slewRateSP->sp[speed].s = ISS_ON;
+	slewRateSP.reset();
+	slewRateSP[speed].setState(ISS_ON);
 	sendNewSwitch(slewRateSP);
 }
 
-void INDIConnection::newDevice(INDI::BaseDevice *dp)
+void INDIConnection::newDevice(INDI::BaseDevice dp)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
 	if (!dp)
 		return;
 
-	QString name(dp->getDeviceName());
+	QString name(dp.getDeviceName());
 
 	qDebug() << "INDIConnection::newDevice| New Device... " << name;
 
@@ -337,91 +336,54 @@ void INDIConnection::newDevice(INDI::BaseDevice *dp)
 	emit newDeviceReceived(name);
 }
 
-void INDIConnection::removeDevice(INDI::BaseDevice *dp)
+void INDIConnection::removeDevice(INDI::BaseDevice dp)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
 	if (!dp)
 		return;
 
-	QString name(dp->getDeviceName());
+	QString name(dp.getDeviceName());
 	int index = mDevices.indexOf(name);
 	if (index != -1)
 		mDevices.removeAt(index);
 
-	if (mTelescope == dp)
-		mTelescope = nullptr;
+	if (mTelescope.isDeviceNameMatch(dp.getDeviceName()))
+		mTelescope.detach();
 
 	emit removeDeviceReceived(name);
 }
 
-void INDIConnection::newProperty(INDI::Property *property)
+void INDIConnection::newProperty(INDI::Property property)
 {
 	std::lock_guard<std::mutex> lock(mMutex);
-	if (mTelescope != property->getBaseDevice())
+	if (!mTelescope.isDeviceNameMatch(
+				property.getBaseDevice().getDeviceName()))
 		return;
 
-	QString name(property->getName());
+	QString name(property.getName());
 
 	qDebug() << "INDIConnection::newProperty| " << name;
 
 	if (name == "EQUATORIAL_EOD_COORD")
 	{
-		mCoordinates.RA = property->getNumber()->np[0].value;
-		mCoordinates.DEC = property->getNumber()->np[1].value;
+		mCoordinates.RA = property.getNumber()->np[0].value;
+		mCoordinates.DEC = property.getNumber()->np[1].value;
 	}
 
-	if (!mTelescope->isConnected())
+	if (!mTelescope.isConnected())
 	{
-		connectDevice(mTelescope->getDeviceName());
-		if (mTelescope->isConnected())
+		connectDevice(mTelescope.getDeviceName());
+		if (mTelescope.isConnected())
 			qDebug() << "connected\n";
 	}
 }
 
-void INDIConnection::removeProperty(INDI::Property *property)
+void INDIConnection::removeProperty(INDI::Property property)
 {
 	Q_UNUSED(property)
 }
 
-void INDIConnection::newBLOB(IBLOB *bp)
-{
-	Q_UNUSED(bp)
-}
-
-void INDIConnection::newSwitch(ISwitchVectorProperty *svp)
-{
-	std::lock_guard<std::mutex> lock(mMutex);
-	QString name(svp->name);
-	if (name == "TELESCOPE_SLEW_RATE")
-	{
-		int speed = IUFindOnSwitchIndex(svp);
-		emit speedChanged(speed);
-	}
-}
-
-void INDIConnection::newNumber(INumberVectorProperty *nvp)
-{
-	std::lock_guard<std::mutex> lock(mMutex);
-
-	QString name(nvp->name);
-	if (name == "EQUATORIAL_EOD_COORD")
-	{
-		mCoordinates.RA = nvp->np[0].value;
-		mCoordinates.DEC = nvp->np[1].value;
-	}
-}
-
-void INDIConnection::newText(ITextVectorProperty *tvp)
-{
-	Q_UNUSED(tvp)
-}
-
-void INDIConnection::newLight(ILightVectorProperty *lvp)
-{
-	Q_UNUSED(lvp)
-}
-
-void INDIConnection::newMessage(INDI::BaseDevice *dp, int messageID)
+void INDIConnection::newMessage(INDI::BaseDevice dp, int messageID)
 {
 	Q_UNUSED(dp)
 	Q_UNUSED(messageID)
diff --git a/plugins/TelescopeControl/src/INDI/INDIConnection.hpp b/plugins/TelescopeControl/src/INDI/INDIConnection.hpp
index 09dd4f915162..1643b1f22b1c 100644
--- a/plugins/TelescopeControl/src/INDI/INDIConnection.hpp
+++ b/plugins/TelescopeControl/src/INDI/INDIConnection.hpp
@@ -21,6 +21,7 @@
 
 #include <QObject>
 #include "libindi/baseclient.h"
+#include <libindi/basedevice.h>
 
 #include <mutex>
 #include <QStringList>
@@ -64,21 +65,16 @@ class INDIConnection final : public QObject, public INDI::BaseClient
 	void setSpeed(int speed);
 
 	mutable std::mutex mMutex;
-	INDI::BaseDevice* mTelescope = nullptr;
+	INDI::BaseDevice mTelescope;
 	Coordinates mCoordinates;
 	QStringList mDevices;
 
 public: // from INDI::BaseClient
-	void newDevice(INDI::BaseDevice *dp) override;
-	void removeDevice(INDI::BaseDevice *dp) override;
-	void newProperty(INDI::Property *property) override;
-	void removeProperty(INDI::Property *property) override;
-	void newBLOB(IBLOB *bp) override;
-	void newSwitch(ISwitchVectorProperty *svp) override;
-	void newNumber(INumberVectorProperty *nvp) override;
-	void newText(ITextVectorProperty *tvp) override;
-	void newLight(ILightVectorProperty *lvp) override;
-	void newMessage(INDI::BaseDevice *dp, int messageID) override;
+	void newDevice(INDI::BaseDevice dp) override;
+	void removeDevice(INDI::BaseDevice dp) override;
+	void newProperty(INDI::Property property) override;
+	void removeProperty(INDI::Property property) override;
+	void newMessage(INDI::BaseDevice dp, int messageID) override;
 	void serverConnected() override;
 	void serverDisconnected(int exit_code) override;
 	void unParkTelescope();

From 805af26e4e97e5081a1c35c1b0d676b6d3a3402f Mon Sep 17 00:00:00 2001
From: Paolo Stivanin <info@paolostivanin.com>
Date: Tue, 13 Jun 2023 08:50:56 +0200
Subject: [PATCH 2/2] Update src/external/CMakeLists.txt to INDI 2.0.2

based on work of Chris Kuethe <chris.kuethe@gmail.com>
---
 src/external/CMakeLists.txt | 149 ++++++++++++++++++++++++------------
 1 file changed, 99 insertions(+), 50 deletions(-)

diff --git a/src/external/CMakeLists.txt b/src/external/CMakeLists.txt
index ec77abb4ede2..62dfcf539230 100644
--- a/src/external/CMakeLists.txt
+++ b/src/external/CMakeLists.txt
@@ -81,21 +81,43 @@ IF(USE_PLUGIN_TELESCOPECONTROL)
         set_target_properties(indiclient PROPERTIES
             IMPORTED_LOCATION "${INDICLIENT_LIB}")
     else()
+        include(CheckSymbolExists)
+        check_symbol_exists(mremap sys/mman.h HAVE_MREMAP)
+        check_symbol_exists(timespec_get time.h HAVE_TIMESPEC_GET)
+        check_symbol_exists(clock_gettime time.h HAVE_CLOCK_GETTIME)
+
         # Git repo is large, limit download to archive
         # Included CMakeLists.txt contains unrelated targets and dependencies of
         # them, therefore DOWNLOAD_ONLY and all the code below
         CPMAddPackage(NAME indiclient
-            URL https://github.com/indilib/indi/archive/v1.8.5.zip
-            URL_HASH SHA256=57b78afe6d338533e35725e94cf6a9e302e22348ab418811bd41997cddf13fd6
-            VERSION 1.8.5
+            URL https://github.com/indilib/indi/archive/v2.0.2.zip
+            URL_HASH SHA256=3278ab38cc751ae262d6808808dd38124879a9b1270edd7351f866abe9d2fd45
+            VERSION 2.0.2
             DOWNLOAD_ONLY YES)
 
-        # Installed version has /usr/include/libindi, move these headers to
-        # such directory for a consistent #include
-        file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/libindi)
-        file(GLOB INDI_HEADERS "${indiclient_SOURCE_DIR}/libs/indibase/*.h")
-        file(COPY ${INDI_HEADERS}
-            DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/libindi)
+        # First, fix a missing include
+        file(READ
+                ${indiclient_SOURCE_DIR}/libs/indicore/indidevapi.h
+                INDIDEVAPI_H)
+        string(REGEX REPLACE "#include .lilxml.h."
+                "#include \"lilxml.h\"\n#include <stdarg.h>"
+                INDIDEVAPI_H "${INDIDEVAPI_H}")
+        file(WRITE
+                ${indiclient_SOURCE_DIR}/libs/indicore/indidevapi.h.new
+                "${INDIDEVAPI_H}")
+        configure_file(${indiclient_SOURCE_DIR}/libs/indicore/indidevapi.h.new
+                ${indiclient_SOURCE_DIR}/libs/indicore/indidevapi.h COPYONLY)
+
+        # libastro.h doesn't need libnova/utility.h
+        file(READ
+                ${indiclient_SOURCE_DIR}/libs/indicore/libastro.h
+                LIBASTRO_H)
+        string(REGEX REPLACE "#include <libnova/utility.h>" "" LIBASTRO_H "${LIBASTRO_H}")
+        file(WRITE
+                ${indiclient_SOURCE_DIR}/libs/indicore/libastro.h.new
+                "${LIBASTRO_H}")
+        configure_file(${indiclient_SOURCE_DIR}/libs/indicore/libastro.h.new
+                ${indiclient_SOURCE_DIR}/libs/indicore/libastro.h COPYONLY)
 
         # Avoid bundling libnova too
         file(READ
@@ -107,10 +129,10 @@ IF(USE_PLUGIN_TELESCOPECONTROL)
         string(REGEX REPLACE
             "ln_lnlat_posn lnobserver { 0, 0 };" ""
             INDITELESCOPE_H "${INDITELESCOPE_H}")
-        file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/libindi/inditelescope.h.new
+        file(WRITE ${indiclient_SOURCE_DIR}/inditelescope.h.new
             "${INDITELESCOPE_H}")
-        configure_file(${CMAKE_CURRENT_BINARY_DIR}/libindi/inditelescope.h.new
-            ${CMAKE_CURRENT_BINARY_DIR}/libindi/inditelescope.h COPYONLY)
+        configure_file(${indiclient_SOURCE_DIR}/inditelescope.h.new
+            ${indiclient_SOURCE_DIR}/libs/indibase/inditelescope.h COPYONLY)
 
         # Fix build in windows
         file(READ
@@ -119,51 +141,78 @@ IF(USE_PLUGIN_TELESCOPECONTROL)
         string(REGEX REPLACE "#include <sys/time.h>"
             "#ifdef Q_OS_WIN\n#include <windows.h>\n#else\n#include <sys/time.h>\n#endif"
             INDILOGGER_H "${INDILOGGER_H}")
-        file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/libindi/indilogger.h.new
+        file(WRITE ${indiclient_SOURCE_DIR}/indilogger.h.new
             "${INDILOGGER_H}")
-        configure_file(${CMAKE_CURRENT_BINARY_DIR}/libindi/indilogger.h.new
-            ${CMAKE_CURRENT_BINARY_DIR}/libindi/indilogger.h COPYONLY)
-
-        # https://devblogs.microsoft.com/cppblog/msvc-preprocessor-progress-towards-conformance/
-        # This patch is upstreamed at
-        # https://github.com/indilib/indi/pull/1728 so after version 1.9.8
-        # shouldn't be needed
-        file(GLOB INDILOCALE_H ${indiclient_SOURCE_DIR}/libs/locale_compat.h)
-        if (INDILOCALE_H)
-            file(READ ${indiclient_SOURCE_DIR}/libs/locale_compat.h INDILOCALE_H)
-            string(REGEX REPLACE "L#s" "L\"\"#s" INDILOCALE_H "${INDILOCALE_H}")
-            file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/libindi/locale_compat.h.new
-                "${INDILOCALE_H}")
-            configure_file(${CMAKE_CURRENT_BINARY_DIR}/libindi/locale_compat.h.new
-                ${CMAKE_CURRENT_BINARY_DIR}/libindi/locale_compat.h COPYONLY)
-            file(RENAME ${indiclient_SOURCE_DIR}/libs/locale_compat.h
-                ${indiclient_SOURCE_DIR}/libs/locale_compat.h.bak)
-        endif()
+        configure_file(${indiclient_SOURCE_DIR}/indilogger.h.new
+            ${indiclient_SOURCE_DIR}/libs/indibase/indilogger.h COPYONLY)
 
-        set(INDI_SOVERSION "1")
-        set(CMAKE_INDI_VERSION_MAJOR 1)
-        set(CMAKE_INDI_VERSION_MINOR 8)
-        set(CMAKE_INDI_VERSION_RELEASE 5)
+        set(INDI_SOVERSION "2")
+        set(CMAKE_INDI_VERSION_MAJOR 2)
+        set(CMAKE_INDI_VERSION_MINOR 0)
+        set(CMAKE_INDI_VERSION_RELEASE 2)
         set(CMAKE_INDI_VERSION_STRING "${CMAKE_INDI_VERSION_MAJOR}.${CMAKE_INDI_VERSION_MINOR}.${CMAKE_INDI_VERSION_RELEASE}")
         set(INDI_VERSION ${CMAKE_INDI_VERSION_MAJOR}.${CMAKE_INDI_VERSION_MINOR}.${CMAKE_INDI_VERSION_RELEASE})
         set(DATA_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/share/indi/")
         configure_file(${indiclient_SOURCE_DIR}/config.h.cmake
-            ${CMAKE_CURRENT_BINARY_DIR}/libindi/config.h )
-        add_library(indiclient STATIC
-            ${indiclient_SOURCE_DIR}/libs/lilxml.c
-            ${indiclient_SOURCE_DIR}/base64.c
-            ${indiclient_SOURCE_DIR}/libs/indibase/basedevice.cpp
-            ${indiclient_SOURCE_DIR}/libs/indibase/baseclient.cpp
-            ${indiclient_SOURCE_DIR}/libs/indibase/indiproperty.cpp
-            ${indiclient_SOURCE_DIR}/libs/indibase/indistandardproperty.cpp
-            ${indiclient_SOURCE_DIR}/libs/indicom.c)
+            ${indiclient_SOURCE_DIR}/config.h )
+
+        configure_file(${indiclient_SOURCE_DIR}/libs/indicore/indiapi.h.in
+                ${indiclient_SOURCE_DIR}/libs/indiapi.h)
+        list(APPEND INDILIB_SOURCES
+                ${indiclient_SOURCE_DIR}/libs/indicore/lilxml.cpp
+                ${indiclient_SOURCE_DIR}/libs/indicore/base64.c
+                ${indiclient_SOURCE_DIR}/libs/indicore/indidevapi.c
+                ${indiclient_SOURCE_DIR}/libs/indicore/indicom.c
+                ${indiclient_SOURCE_DIR}/libs/indicore/userio.c
+                ${indiclient_SOURCE_DIR}/libs/indicore/indiuserio.c
+                ${indiclient_SOURCE_DIR}/libs/indiabstractclient/abstractbaseclient.cpp
+                ${indiclient_SOURCE_DIR}/libs/indiclient/baseclient.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/basedevice.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/indibase.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/indistandardproperty.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/parentdevice.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/watchdeviceproperty.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indiproperties.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertybasic.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertyblob.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indiproperty.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertylight.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertynumber.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertyswitch.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertytext.cpp
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property/indipropertyview.cpp
+                ${indiclient_SOURCE_DIR}/libs/sockets/tcpsocket.cpp
+                )
+        if(WIN32)
+            list(APPEND INDILIB_SOURCES ${indiclient_SOURCE_DIR}/libs/sockets/tcpsocket_win.cpp)
+        else()
+            list(APPEND INDILIB_SOURCES ${indiclient_SOURCE_DIR}/libs/sockets/tcpsocket_unix.cpp)
+        endif()
+
+        add_library(indiclient STATIC ${INDILIB_SOURCES})
+
+        target_compile_definitions(indiclient
+          PUBLIC
+            $<$<BOOL:${HAVE_TIMESPEC_GET}>:HAVE_TIMESPEC_GET>
+            $<$<BOOL:${HAVE_CLOCK_GETTIME}>:HAVE_CLOCK_GETTIME>
+        )
+
         target_include_directories(indiclient
-            PRIVATE
-            ${CMAKE_CURRENT_BINARY_DIR}/libindi
-            PUBLIC
-            ${CMAKE_CURRENT_BINARY_DIR}
-            ${indiclient_SOURCE_DIR}
-            ${indiclient_SOURCE_DIR}/libs)
+                PRIVATE
+                ${CMAKE_CURRENT_BINARY_DIR}/libindi
+                ${indiclient_SOURCE_DIR}/libindi
+                ${indiclient_SOURCE_DIR}/libs
+                PUBLIC
+                ${CMAKE_CURRENT_BINARY_DIR}
+                ${indiclient_SOURCE_DIR}
+                ${indiclient_SOURCE_DIR}/libs/sockets
+                ${indiclient_SOURCE_DIR}/libs/indiabstractclient
+                ${indiclient_SOURCE_DIR}/libs/indibase
+                ${indiclient_SOURCE_DIR}/libs/indicore
+                ${indiclient_SOURCE_DIR}/libs/indiclient
+                ${indiclient_SOURCE_DIR}/libs/indidevice
+                ${indiclient_SOURCE_DIR}/libs/indidevice/property
+                ${indiclient_SOURCE_DIR}/libs)
         target_link_libraries(indiclient ${ZLIB_LIBRARIES})
     endif()
 ENDIF()
